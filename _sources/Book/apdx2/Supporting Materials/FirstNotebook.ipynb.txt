{
 "metadata": {
  "name": "",
  "signature": "sha256:75e9265a392bf07942083d1bd9b6ab568e7dc38cde50cac5bf9542751a9dbfeb"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Demo of IPython Notebook"
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "David Pine"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "2+3"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 1,
       "text": [
        "5"
       ]
      }
     ],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import numpy as np\n",
      "import matplotlib.pyplot as plt"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.sin(np.pi/6)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "0.49999999999999994"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot([1,2,3,2,3,4,3,4,5])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 4,
       "text": [
        "[<matplotlib.lines.Line2D at 0x10cfc8b90>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10c730dd0>"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Calculates time, gallons of gas used, and cost of gasoline for\n",
      "# a trip\n",
      "\n",
      "distance = float(raw_input(\"Input distance of trip in miles: \"))\n",
      "mpg = 30.               # car mileage\n",
      "speed = 60.             # average speed\n",
      "costPerGallon = 4.10    # price of gas\n",
      "\n",
      "time = distance/speed\n",
      "gallons = distance/mpg\n",
      "cost = gallons*costPerGallon\n",
      "\n",
      "print(\"\\nDuration of trip = {0:0.1f} hours\".format(time))\n",
      "print(\"Gasoline used = {0:0.1f} gallons (@ {1:0.0f} mpg)\"\n",
      "      .format(gallons, mpg))\n",
      "print(\"Cost of gasoline = ${0:0.2f} (@ ${1:0.2f}/gallon)\"\n",
      "      .format(cost, costPerGallon))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Input distance of trip in miles: 450\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Duration of trip = 7.5 hours\n",
        "Gasoline used = 15.0 gallons (@ 30 mpg)\n",
        "Cost of gasoline = $61.50 (@ $4.10/gallon)\n"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "The total distance $x$ traveled during a trip can be\n",
      "obtained by integrating the velocity $v(t)$ over the\n",
      "duration $T$ of the trip:\n",
      "\\begin{align}\n",
      "    x = \\int_0^T v(t)\\, dt\n",
      "\\end{align}"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "!cat LiamSelinaData.txt"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Date: 2013-09-16\r\n",
        "Data taken by Liam and Selena\r\n",
        "frequency (Hz) amplitude (mm)  amp error (mm)\r\n",
        "    0.7500        13.52         0.32\r\n",
        "    1.7885        12.11         0.92\r\n",
        "    2.8269        14.27         0.73\r\n",
        "    3.8654        16.60         2.06\r\n",
        "    4.9038        22.91         1.75\r\n",
        "    5.9423        35.28         0.91\r\n",
        "    6.9808        60.99         0.99\r\n",
        "    8.0192        33.38         0.36\r\n",
        "    9.0577        17.78         2.32\r\n",
        "   10.0962        10.99         0.21\r\n",
        "   11.1346         7.47         0.48\r\n",
        "   12.1731         6.72         0.51\r\n",
        "   13.2115         4.40         0.58\r\n",
        "   14.2500         4.07         0.63"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}